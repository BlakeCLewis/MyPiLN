#!/usr/bin/python


#def do_it():
#        while 1:
#                print "hi "
#                time.sleep(1)
#
#with daemon.DaemonContext():
#        do_it()

import time
import daemon
import sys
import MySQLdb
import RPi.GPIO as GPIO ## Import GPIO library
import Adafruit_GPIO.SPI as SPI
import Adafruit_MAX31855.MAX31855 as MAX31855
from PID import PID

sqlHost = '127.0.0.1'
sqlUser = 'piln'
sqlPass = 'p!lnp@ss'
sqlDB   = 'PiLN'

Kp = 2.0
Ki = 1.0
Kd = 0.0
p=PID(Kp,Ki,Kd)

CLK = 25
CS  = 24
DO  = 18
Sensor = MAX31855.MAX31855(CLK, CS, DO)

#RunID  = int(sys.argv[1])
#Segment= int(sys.argv[2])
#SetTmp = float(sys.argv[3])
#Rate   = float(sys.argv[4])
#HoldMin= float(sys.argv[5])
#IntSec = float(sys.argv[6])

GPIO.setup(4, GPIO.OUT) ## Setup GPIO Pin 7 to OUT

def CtoF(c):
  return c * 9.0 / 5.0 + 32.0

def Update ( SP, PV, IMax, IMin ):
  global LastErr, IState
  Err = SP - PV
  Pterm = Kp * Err
  Dterm = Kd * ( Err - LastErr )
  LastErr = Err
  IState  = IState + Err

  if IState > IMax:
    IState = IMax
  elif IState < IMin:
    IState = IMin

  Iterm = Ki * IState

#  IState = ( Err * IntSec )
#  
#  if IState > IMax:
#    IState = IMax
#  elif IState < IMin:
#    IState = IMin
#  Dterm = Kd * ( ( Err - LastErr ) / IntSec )
#  LastErr = Err

  print " Error: ", Err
  print "IState: ", IState
  print " Pterm: ", Pterm
  print " Iterm: ", Iterm
  print " Dterm: ", Dterm
  return Pterm + Iterm + Dterm

#print "===START==="

#while 1:
#
#  # Check for 'Started' firing profile
#  sqlConn = MySQLdb.connect(sqlHost, sqlUser, sqlPass, sqlDB);
#  sqlCur  = sqlConn.cursor()
#  sqlCur.execute("select run_id from Profiles where state='Started'")
#  run_id = sqlCur.fetchone()
#
#  if run_id:
#    print "Run ID %d is active - starting firing profile." % run_id
#
#    # Get segments
#    sql="select * from Segments where run_id='%d'" % run_id
#    sqlCur.execute(sql)
#    prof_segs = sqlCur.fetchall()
#
#    for row in prof_segs:
#      seg = row[1]
#      set_temp = row[2]
#      rate = row[3]
#      hold_min = row[4]
#      int_sec = row[5]
#
#      fire(run_id,seg,set_temp,rate,hold_min,int_sec)
#
#  else:
#    print "No active profiles found."
#
#  sqlConn.close() 
#  time.sleep(5)


def fire(run_id,seg,set_temp,rate,hold_min,int_sec):
  
  SetTmp = set_temp
  Rate = rate
  HoldSec = hold_min * 60
  IntSec  = int_sec
  RampMin = 0.0
  RampTmp = 0.0
  ReadTmp = 0.0
  StartTmp= 0.0
  TmpDif  = 0.0
  Steps   = 0.0
  StepTmp = 0.0
  LastErr = 0.0
  StartSec= 0.0
  EndSec  = 0.0
  NextInt = 0.0
  IState  = 0.0
  Cnt = 0

  #while ( int(time.time()) <= EndSec ) or ( StartSec == 0 ):
  while ( ReadTmp < SetTmp ) or ( int(time.time()) <= EndSec ) or ( StartSec == 0 ):

    if int(time.time()) >= NextInt:
      Cnt += 1
      NextInt += IntSec
  
      if RampTmp < SetTmp:
        RampTmp += StepTmp 
      elif RampTmp > SetTmp:
        RampTmp = SetTmp
  
      # Get temp
      ReadCTmp = Sensor.readTempC()
      ReadTmp = CtoF(ReadCTmp)
      ReadCITmp = Sensor.readInternalC()
      ReadITmp = CtoF(ReadCITmp)
  
      if StartTmp == 0:
        StartTmp = ReadTmp
        StartSec = int(time.time())
        NextInt  = StartSec + IntSec
        TmpDif   = SetTmp - StartTmp
        RampMin  = ( TmpDif / Rate ) * 60
        Steps    = ( RampMin * 60 ) / IntSec
        StepTmp  = TmpDif / Steps
        EndSec   = StartSec + ( RampMin * 60 ) + ( hold_min * 60 )
        RampTmp  = StartTmp + StepTmp
  
        print "    Set Temp: ", SetTmp
        print "  Start Temp: ", StartTmp
        print " Temp Change: ", TmpDif
        print "Ramp Minutes: ", RampMin
        print "       Steps: ", Steps
        print "   Step Temp: ", StepTmp
        print "    Interval: ", IntSec
        print "    StartSec: ", StartSec
        print "      EndSec: ", EndSec
  
      Output = Update(RampTmp,ReadTmp,100,0)
      p.setPoint(RampTmp)
      pid = p.update(ReadTmp)
  
      print "PID: ", pid
  
      CycleOnSec  = IntSec * ( Output * 0.01 )
  
      print ("{:5d} - Temp: {:5.2f}  SetTemp: {:5.2f}  Target: {:5.2f}  Output: {:5.2f}  CycleOnSec: {:5.2f}".format(Cnt,ReadTmp,RampTmp,SetTmp,Output,CycleOnSec))
  
      SQL = "INSERT INTO Firing (run_id, segment, temp, set_temp, pid_output) VALUES ( '%d', '%d', '%s', '%s', '%s' )" % ( run_id, seg, ReadTmp, RampTmp, Output )
      try:
        sqlCur.execute(SQL)
        sqlConn.commit()
      except:
        sqlConn.rollback()
        print "DB Write failed!"
  
      print " ==> On"
      GPIO.output(4,True) ## Turn on GPIO pin 7
      time.sleep(CycleOnSec)
      print " ==> Off"
      GPIO.output(4,False) ## Turn on GPIO pin 7



print "===START==="

while 1:

  # Check for 'Started' firing profile
  sqlConn = MySQLdb.connect(sqlHost, sqlUser, sqlPass, sqlDB);
  sqlCur  = sqlConn.cursor()
  sqlCur.execute("select run_id from Profiles where state='Started'")
  run_id = sqlCur.fetchone()

  if run_id:
    print "Run ID %d is active - starting firing profile." % run_id

    # Get segments
    sql="select * from Segments where run_id='%d'" % run_id
    sqlCur.execute(sql)
    prof_segs = sqlCur.fetchall()

    for row in prof_segs:
      seg = row[1]
      set_temp = row[2]
      rate = row[3]
      hold_min = row[4]
      int_sec = row[5]

      fire(run_id,seg,set_temp,rate,hold_min,int_sec)

  else:
    print "No active profiles found."

  sqlConn.close() 
  time.sleep(5)
